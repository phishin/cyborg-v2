// /stores/userSaved.jsimport { defineStore } from 'pinia'import { ref, computed } from 'vue'import { useNuxtApp } from '#app'import {    getFirestore,    collection,    query,    where,    getDocs,    onSnapshot} from 'firebase/firestore'export const useUserSavedStore = defineStore('userSaved', () => {    const savedLogos = ref([])    const isLoading = ref(false)    const savedLogoCount = computed(() => savedLogos.value.length)    function _getCollectionRef() {        const { $firebaseApp } = useNuxtApp()        const db = getFirestore($firebaseApp)        return collection(db, 'savedLogos')    }    /** Fetch once from Firestore */    async function fetchSavedLogos(userId) {        isLoading.value = true        try {            const colRef = _getCollectionRef()            const q  = query(colRef, where('userId', '==', userId))            const snap = await getDocs(q)            savedLogos.value = snap.docs.map(doc => ({                id:   doc.id,                ...doc.data()            }))        } finally {            isLoading.value = false        }    }    /** Real-time subscription (optional) */    function subscribeSavedLogos(userId) {        const colRef = _getCollectionRef()        const q  = query(colRef, where('userId', '==', userId))        return onSnapshot(q, snap => {            savedLogos.value = snap.docs.map(doc => ({                id: doc.id,                ...doc.data()            }))        })    }    return {        // state        savedLogos,        isLoading,        // getters        savedLogoCount,        // actions        fetchSavedLogos,        subscribeSavedLogos    }})