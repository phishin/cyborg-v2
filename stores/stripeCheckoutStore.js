// stores/stripeCheckoutStore.jsimport { defineStore } from 'pinia'import { loadStripe } from '@stripe/stripe-js'import { useRuntimeConfig } from '#imports'export const useStripeCheckoutStore = defineStore('stripeCheckout', {    state: () => ({        stripePromise: null,        loading: false,        selectedVariation: null,    }),    actions: {        initStripe() {            if (!this.stripePromise) {                const { public: { stripePublishableKey } } = useRuntimeConfig()                this.stripePromise = loadStripe(stripePublishableKey)            }            return this.stripePromise        },        setVariation(variation) {            this.selectedVariation = variation        },        async checkout() {            if (!this.selectedVariation) {                throw new Error('No variation selected')            }            this.loading = true            try {                const stripe = await this.initStripe()                if (!stripe) throw new Error('Stripe.js failed to load')                // create a session, passing only the variation                const res = await fetch('/api/create-checkout-session', {                    method: 'POST',                    headers: { 'Content-Type': 'application/json' },                    body: JSON.stringify({ variation: this.selectedVariation }),                })                if (!res.ok) throw new Error('Session creation failed')                const { sessionId } = await res.json()                const { error } = await stripe.redirectToCheckout({ sessionId })                if (error) throw error            } catch (err) {                console.error(err)                alert(err.message || 'Checkout error')            } finally {                this.loading = false            }        }    }})