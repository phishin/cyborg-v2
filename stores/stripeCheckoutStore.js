// stores/stripeCheckoutStore.jsimport { defineStore }      from 'pinia'import { loadStripe }       from '@stripe/stripe-js'import { useRuntimeConfig } from '#imports'import { useLogoStore }     from '~/stores/logoStores.js'   // ← singular, matches your fileexport const useStripeCheckoutStore = defineStore('stripeCheckout', {    state: () => ({        stripePromise: null,        loading:       false    }),    actions: {        initStripe() {            if (!this.stripePromise) {                const { stripePublishableKey } = useRuntimeConfig().public                console.log('→ Loading Stripe with key', stripePublishableKey)                this.stripePromise = loadStripe(stripePublishableKey)            }            return this.stripePromise        },        async checkout() {            // 1) snapshot your logo state before leaving            try {                const logoStore = useLogoStore()                const savedLogoStates = logoStore.$state                sessionStorage.setItem('logoBuilderState', JSON.stringify(savedLogoStates))                console.log('📝 wrote logoBuilderState:', savedLogoStates.preferredSymbolsOrStyles)            } catch (e) {                console.warn('failed to write snapshot', e)            }            this.loading = true            try {                const stripe = await this.initStripe()                if (!stripe) throw new Error('Stripe.js failed to load')                const { stripePriceId } = useRuntimeConfig().public                console.log('→ Redirecting to Checkout with price:', stripePriceId)                const { error } = await stripe.redirectToCheckout({                    mode: 'payment',                    lineItems: [{ price: stripePriceId, quantity: 1 }],                    successUrl: `${window.location.origin}/create-my-logo?&success=true`,                    cancelUrl:  `${window.location.origin}/create-my-logo`                })                if (error) throw error            } catch (err) {                console.error('💥 Checkout error:', err)                alert(err.message || 'Checkout error')            } finally {                this.loading = false            }        }    }})/* ----------- for live build use this ---------export const useStripeCheckoutStore = defineStore('stripeCheckout', {    state: () => ({        stripePromise: null,        loading: false,        selectedVariation: null,    }),    actions: {        initStripe() {            if (!this.stripePromise) {                const { public: { stripePublishableKey } } = useRuntimeConfig()                this.stripePromise = loadStripe(stripePublishableKey)            }            return this.stripePromise        },        setVariation(variation) {            this.selectedVariation = variation        },        async checkout() {            if (!this.selectedVariation) {                throw new Error('No variation selected')            }            this.loading = true            try {                const stripe = await this.initStripe()                if (!stripe) throw new Error('Stripe.js failed to load')                // create a session, passing only the variation                const res = await fetch('/api/create-checkout-session', {                    method: 'POST',                    headers: { 'Content-Type': 'application/json' },                    body: JSON.stringify({ variation: this.selectedVariation }),                })                if (!res.ok) throw new Error('Session creation failed')                const { sessionId } = await res.json()                const { error } = await stripe.redirectToCheckout({ sessionId })                if (error) throw error            } catch (err) {                console.error(err)                alert(err.message || 'Checkout error')            } finally {                this.loading = false            }        }    }})---------------------------------------- */