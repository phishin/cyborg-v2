// /stores/logoStore.jsimport { defineStore } from 'pinia';export const useLogoStore = defineStore('logoStorageData', {    state: () => ({        creationStep: 1,        logoBuilder: false,        companyName: '',        createMyLogoIsActive: false,        // details for business        selectedIndustry: null,        selectedLogoStyle: null,        fullBusinessName: '',        businessNameInitials: '',        selectedSuffix: null,        businessCategory: '',        sloganOrTagline: '',        sloganOrTaglinePresent: false,        preferredSymbolsOrStyles: [],        selectedFontStyles: [],        selectedColorStyles: [],        // ** END details for business ** //        logoGenerationLoading: false,        originalLogoFieldValues: [],        selectedLogoID: '',        // History arrays â€“ these now hold the snapshots of your state.        undoHistory: [],        redoHistory: [],    }),    actions: {        activateCreateMyLogo() {            this.createMyLogoIsActive = true;        },        triggerLogoGeneration() {            this.logoGenerationLoading = true;            this.creationStep = 0; // Reset step if needed            setTimeout(() => {                this.logoGenerationLoading = false;                this.logoBuilder = true;            }, 1000);        },        nextStep() {            if (this.creationStep < 7) {                this.creationStep++;            }        },        previousStep() {            if (this.creationStep > 1) {                this.creationStep--;            }        },        // Push a deep clone of a snapshot into the undo history (max 15 states).        pushUndoHistory(stateSnapshot, maxHistory = 15) {            // Push a deep clone of the state snapshot            this.undoHistory.push(JSON.parse(JSON.stringify(stateSnapshot)));            if (this.undoHistory.length > maxHistory) {                this.undoHistory.shift();            }            // Clear redo history whenever a new state is recorded.            this.redoHistory = [];        },        // Push a snapshot into the redo history.        pushRedoHistory(stateSnapshot, maxHistory = 15) {            this.redoHistory.push(JSON.parse(JSON.stringify(stateSnapshot)));            if (this.redoHistory.length > maxHistory) {                this.redoHistory.shift();            }        },        // Pop the latest state from undo history.        popUndoHistory() {            return this.undoHistory.pop();        },        popRedoHistory() {            return this.redoHistory.pop();        },        // Restore the state from a snapshot.        restoreState(state) {            this.selectedIndustry = state.selectedIndustry ? { ...state.selectedIndustry } : null;            this.selectedLogoStyle = state.selectedLogoStyle;            this.selectedSuffix = state.selectedSuffix;            this.sloganOrTagline = state.sloganOrTagline;            this.preferredSymbolsOrStyles = [...state.preferredSymbolsOrStyles];            this.selectedColorStyles = [...state.selectedColorStyles];            this.fullBusinessName = state.fullBusinessName;            this.businessNameInitials = state.businessNameInitials;            this.businessCategory = state.businessCategory;        }    },});