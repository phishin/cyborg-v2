// /stores/logoStores.jsimport { defineStore } from 'pinia';import { doc, setDoc, getDocs, collection, query, where } from 'firebase/firestore'// @ts-ignoreexport const useLogoStore = defineStore('logoStorageData', {    state: () => ({        creationStep: 1,        logoBuilder: false,        companyName: '',        createMyLogoIsActive: false,        selectedIndustry: null,        selectedLogoStyle: null,        fullBusinessName: '',        businessNameInitials: '',        selectedSuffix: null,        businessCategory: '',        sloganOrTagline: '',        sloganOrTaglinePresent: false,        preferredSymbolsOrStyles: [],        selectedFontStyles: [],        selectedColorStyles: [],        logoGenerationLoading: false,        originalLogoFieldValues: [],        selectedLogoID: '',        logoEditorSelected: false,        logoEditorLogoID: '',        showSaveLogoModal: false,        // History arrays for        undoHistory: [],        redoHistory: [],    }),    actions: {        activateCreateMyLogo() {            this.createMyLogoIsActive = true;        },        triggerLogoGeneration() {            this.logoGenerationLoading = true;            this.creationStep = 0; // Reset step if needed            setTimeout(() => {                this.logoGenerationLoading = false;                this.logoBuilder = true;            }, 1000);        },        nextStep() {            if (this.creationStep < 7) {                this.creationStep++;            }        },        previousStep() {            if (this.creationStep > 1) {                this.creationStep--;            }        },        // Push undo        pushUndoHistory(stateSnapshot, maxHistory = 15) {            this.undoHistory.push(JSON.parse(JSON.stringify(stateSnapshot)));            if (this.undoHistory.length > maxHistory) {                this.undoHistory.shift();            }            this.redoHistory = [];        },      // push redo        pushRedoHistory(stateSnapshot, maxHistory = 15) {            this.redoHistory.push(JSON.parse(JSON.stringify(stateSnapshot)));            if (this.redoHistory.length > maxHistory) {                this.redoHistory.shift();            }        },        popUndoHistory() {            return this.undoHistory.pop();        },        popRedoHistory() {            return this.redoHistory.pop();        },        // Restore a state        restoreState(state) {            this.selectedIndustry = state.selectedIndustry ? { ...state.selectedIndustry } : null;            this.selectedLogoStyle = state.selectedLogoStyle;            this.selectedSuffix = state.selectedSuffix;            this.sloganOrTagline = state.sloganOrTagline;            this.preferredSymbolsOrStyles = [...state.preferredSymbolsOrStyles];            this.selectedColorStyles = [...state.selectedColorStyles];            this.fullBusinessName = state.fullBusinessName;            this.businessNameInitials = state.businessNameInitials;            this.businessCategory = state.businessCategory;        },        // logo editor        openLogoEditor(logoID) {            this.selectedLogoID     = logoID;            this.logoEditorSelected = true;        },        closeLogoEditor() {            this.logoEditorSelected = false;            this.selectedLogoID     = '';        },        // ─── FIRESTORE SAVING / LOADING ──────────────────────────────────────────        async saveLogo() {            const nuxtApp = useNuxtApp()            const auth = nuxtApp.$firebase.auth            const db   = nuxtApp.$firebase.firebaseDatabase            const user = auth.currentUser            if (!user) {                throw new Error('You must be logged in to save a logo')            }            const payload = {                userId:    user.uid,                createdAt: new Date(),                state:     JSON.parse(JSON.stringify(this.$state))            }            const id = `${user.uid}_${Date.now()}`            await setDoc(doc(db, 'logos', id), payload)            return id        },        async fetchSavedLogos() {            const nuxtApp = useNuxtApp()            const auth = nuxtApp.$firebase.auth            const db   = nuxtApp.$firebase.firebaseDatabase            const user = auth.currentUser            if (!user) return []            const q    = query(collection(db, 'logos'), where('userId', '==', user.uid))            const snap = await getDocs(q)            return snap.docs.map(d => ({ id: d.id, ...d.data() }))        },        restoreLogo(saved) {            this.$patch(saved.state)        },    },});