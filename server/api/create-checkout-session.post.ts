// server/api/create-checkout-session.post.tsimport { defineEventHandler, readBody, createError } from 'h3'import { useRuntimeConfig } from '#imports'import Stripe from 'stripe'export default defineEventHandler(async (event) => {    // 1) Parse body and validate    const { variation } = await readBody<{ variation?: string }>(event)    if (!variation) {        console.log('[checkout] ‚ùå missing variation in request body')        throw createError({ statusCode: 400, statusMessage: 'Missing variation' })    }    // 2) Pull in your config    const config    = useRuntimeConfig()    const secretKey = config.stripeSecretKey as string    const priceId   = config.stripePriceId   as string    // 3) Log what you‚Äôve got    console.log('[checkout] üîë secretKey loaded?', Boolean(secretKey))    console.log('[checkout] üí≥ priceId:', priceId)    console.log('[checkout] üé® variation:', variation)    try {        // 4) Create Stripe session        const stripe = new Stripe(secretKey, { apiVersion: '2022-11-15' })        const origin = event.req.headers.origin || ''        const session = await stripe.checkout.sessions.create({            mode: 'payment',            payment_method_types: ['card'],            line_items: [{ price: priceId, quantity: 1 }],            metadata: { variation },            success_url: `${origin}/success?session_id={CHECKOUT_SESSION_ID}`,            // if user cancel go back to this URL            cancel_url:  `${origin}/`,        })        return { sessionId: session.id }    } catch (err: any) {        console.error('[checkout] ‚ö†Ô∏è Stripe API error:', err)        throw createError({            statusCode: err.statusCode || 500,            statusMessage: err.message        })    }})